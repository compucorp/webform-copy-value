<?php

function webform_copy_value_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == "webform_component_edit_form") {
    $type = $form['type']['#value'];
    $components = $form['#node']->webform['components'];
    if(in_array($type, array('textfield','select', 'hidden', 'textarea', 'number', 'date', 'file', 'time'))){
      $node = $form['#node'];
      $nid = $node->nid;
      $cid = !empty($form['cid']['#value']) ? $form['cid']['#value'] : "";

      if($type == 'hidden') {
        $fieldList = get_webform_fields($components);
      }
      else {
        $fieldList = get_webform_fields($components, $type);
      }
      
      if(!empty($cid)) {
        $mappings = get_mappings($nid, $cid);
        if(!empty($mappings)) {
          $defaultValue = $mappings[0]->source;
        }
      }

      unset($fieldList[$form['form_key']['#default_value']]);
      $fieldList[0] = '--None--';

      $form['copy_value_of'] = array (
        '#type' => 'select',
        '#title' => 'Copy value of field',
        '#options' => $fieldList,
        '#default_value' => isset($defaultValue) ? $defaultValue : 0,
        '#weight' => 0,
      );
      array_unshift($form['#submit'], 'webform_copy_value_submit');
    }
  }

  if(strpos($form_id, 'webform_client_form') !== FALSE) {
    $components = $form['#node']->webform['components'];
    $sourceTargetMap = get_source_target_field_map($components, $form['#node']->nid);

    // handle fields with pagebreaks
    if(isset($form_state['values'])) {
      foreach ($form_state['values']['submitted'] as $submittedFieldkey => $submittedValue) {
        foreach ($sourceTargetMap as $st) {
          if($st['sourceCid'] == $submittedFieldkey) {
            if($components[$st['cid']]['page_num'] != $components[$submittedFieldkey] 
                  && empty($form_state['values']['submitted'][$st['cid']])) {
              $form['submitted'][$st['target']]['#default_value'] = $submittedValue;
            }
          }
        }
      }
    }

    // Prepare sourceTargetMap variable for javascript
    if(!empty($sourceTargetMap)) {
      array_unshift($form['#validate'], 'webform_copy_value_front_validate');
      $scm = array();
      foreach($sourceTargetMap as $k => $val) {
        $targetParents = webform_component_parent_keys($form['#node'], $components[$val['cid']]);
        $type = get_component_by_name($form['#node']->webform['components'], $val['target'])['type'];

        $target = 'submitted';
        foreach($targetParents as $targetParent) {
          $target .= '[' . $targetParent . ']';
        }

        $sourceParents = webform_component_parent_keys($form['#node'], $components[$val['sourceCid']]);

        // processing needed for date and time
        if($type == 'date') {
          $dateFields = array('month', 'day', 'year');
          foreach($dateFields as $dateField) {
            $sourceID = 'edit-submitted-' . str_replace('_', '-', implode('-', $sourceParents)) . "-$dateField";
            $scm[$sourceID][$val['cid']] = $target . '[' . $dateField . ']';
          }
        } 
        else if($type == 'time'){
          $timeFields = array ('hour', 'minute', 'second', 'am', 'pm');
          $sourceBaseID = 'edit-submitted-' . str_replace('_', '-', implode('-', $sourceParents));
          foreach($timeFields as $timeField) {
            if(in_array($timeField, array('am', 'pm'))){
              $sourceID = $sourceBaseID . "-ampm";
              $scm[$sourceID][$val['cid']] = $target . '[ampm]';
            } else {
              $sourceID = $sourceBaseID . "-$timeField";
              $scm[$sourceID][$val['cid']] = $target . '[' . $timeField . ']';
            }
          }
        }
        else {
          $sourceID = 'edit-submitted-' . str_replace('_', '-', implode('-', $sourceParents));
          $scm[$sourceID][$val['cid']] = $target;
        }
      }

      // Attach necessary JavaScript.
      $form['#attached']['js'][] = drupal_get_path('module', 'webform_copy_value') . '/js/webform_copy_value.js';
      $form['#attached']['js'][] = array (
        // Pass PHP variables to Drupal.settings.
        'data' => array(
          'sourceTargetMap' => $scm,
        ),
        'type' => 'setting',
      );
    }
  }
}

/**
 * Addition submit function for component edit form
 * to handle submission with source field value
 * 
 * @param object $form
 * @param object $form_state
 */
function webform_copy_value_submit($form, &$form_state) {
  $sourceFieldId = $form_state['values']['copy_value_of'];
  $cid = $form_state['values']['cid'];
  $nid = $form_state['values']['nid'];
  if($cid == NULL){
    $dbo = db_query("select max(`cid`) + 1  as newCid from webform_component where nid = {$nid}");
    $cid = $dbo->fetch()->newCid;
    if(empty($cid)) {
      $cid = 1;
    }
  }
  $recordExists = db_query("SELECT id from webform_copy_value where cid = {$cid} AND nid = {$nid}");
  $mapId = $recordExists->fetchField();
  if(!empty($sourceFieldId)) {
    if(!$mapId) {
      db_insert('webform_copy_value')
      ->fields(array(
        'cid' => $cid,
        'nid' => $nid,
        'source' => $form_state['values']['copy_value_of'],
        'target' => $form_state['values']['form_key'],
      ))
      ->execute();
    } else {
      db_query("UPDATE webform_copy_value set `source` = '{$form_state['values']['copy_value_of']}' where id = {$mapId}");
    }
  } else if($sourceFieldId == 0 && !empty($mapId)) {
    db_query("DELETE from webform_copy_value where id = {$mapId}");
  }
}

/**
 * Hidden fields copy to civicrm destination field
 */
function webform_copy_value_front_validate($form, &$form_state) {
  $components = $form['#node']->webform['components'];
  $sourceTargetMap = get_source_target_field_map($components, $form['#node']->nid);
  foreach($sourceTargetMap as $k => $val) {
    if($components[$val['cid']]['type'] == 'hidden') {
      $targetParents = webform_component_parent_keys($form['#node'], $components[$val['cid']]);
      $sourceParents = webform_component_parent_keys($form['#node'], $components[$val['sourceCid']]);
      $values = get_source_value($form_state['values']['submitted'], $sourceParents);
      set_target_value($form_state['values']['submitted'], $targetParents, remove_empty_indexes($values));
    }
  }
}

/**
 * source target map array for Javascript
 * 
 * @param array $components
 * @return array $sourceTargetMap
 */
function get_source_target_field_map($components, $nid) {
  $sourceTargetMap = array();
  $count = 0;
  $mappings = get_mappings($nid);
  foreach($mappings as $mapping) {
    $sourceTargetMap[$count]['cid'] = $mapping->cid;
    $sourceTargetMap[$count]['target'] = $mapping->target;
    $sourceTargetMap[$count]['source'] = $mapping->source;
    $sourceFieldCid = get_component_by_name($components, $mapping->source)['cid'];
    $sourceTargetMap[$count]['sourceCid'] = $sourceFieldCid;
    
    $count ++;
  }
  return $sourceTargetMap;
}

function get_mappings($nid, $cid = 0) {
  $query = "SELECT * from webform_copy_value where nid = {$nid}";
  if(!empty($cid)) {
    $query .= " and cid = {$cid}";
  }
  $mappings = db_query($query);
  return $mappings->fetchAll();
}

/**
 * get form key by default value
 * 
 * @param string $value
 * @return string
 */
function get_source_form_key ($value) {
  preg_match('/\[webform_copy_value\:(.*?)\]/', $value, $match);
  return $match[1];
}

/**
 * field list
 * 
 * @param array $components
 * @param string $type
 * @return array
 */
function get_webform_fields($components, $type = NULL) {
  $fields = array();
  foreach ($components as $component) {
    if(!empty($type)) {
      if($component['type'] == $type) {
        $cid  = $component['form_key'];
        $fields[$cid] = $component['name'];
      }
    } 
    else {
      $cid  = $component['form_key'];
      $fields[$cid] = $component['name'];
    }
  }
  return $fields;
}

/**
 * Handy function to fetch component info by it's name
 * 
 * @param array $components
 * @param string $formKey
 * @return array
 */
function get_component_by_name($components, $formKey) {
  foreach ($components as $component) {
    if($component['form_key'] == $formKey) {
      return $component;
    }
  }
  return false;
}

/**
 * Implements hook_webform_submission_presave().
 * 
 * Handle hidden fields
 */
function webform_copy_value_webform_submission_presave($node, &$submission) {
  $components = $node->webform['components'];
  $mappings = get_mappings($node->nid);

  foreach($mappings as $mapping) {
    if($components[$mapping->cid]['type'] == 'hidden') {
      $sourceFormKey = $mapping->source;
      $sourceFieldId = get_component_by_name($components, $sourceFormKey)['cid'];
      if($components[$sourceFieldId]['type'] == 'select') {
        $options = wf_crm_field_options($components[$mapping->cid], 'component_edit', wf_crm_aval($node, 'webform_civicrm:data'));
        if(!empty($options)) {
         $submissionString = "";
         foreach($submission->data[$mapping->cid] as $optionKey) {
           if($optionKey != 0) {
             $submissionString .=  $options[$optionKey] . ", ";
           }
         }
         $submission->data[$mapping->cid] = array();
         $submission->data[$mapping->cid][0] = rtrim($submissionString, ', ');
        }
      } 
      else {
        $submission->data[$mapping->cid] = $submission->data[$sourceFieldId];
      }
    }
  }
}

/**
 * Remove empty indexes from hidden fields
 * 
 * @param array $values
 * @return array
 */
function remove_empty_indexes($values) {
  if(count($values) > 1) {
    foreach($values as $key => $value) {
      if(empty($value)) {
        unset($values[$key]);
      }
    }
  }
  return $values;
}

/**
 * Fix date_time for hidden fields
 *
 * @param array $values
 * @return string
 */
function fix_date_time_for_hidden_fields($values) {
  if(isset($values['month'])) {
    return $values['year'].sprintf("%02d", $values['month']).sprintf("%02d", $values['day']);
  }
  return $values;
}

/**
 * Function to copy value to target
 *
 * @param array $array
 * @param array $path
 * @param array|string $val
 */
function set_target_value(&$array,$path,$val) {
  for($i=&$array; $key=array_shift($path); $i=&$i[$key]) {
    if(!isset($i[$key])) $i[$key] = array();
  }
  $i = $val;
}


/**
 * Function to get value from source
 *
 * @param array $array
 * @param array $sourceParents
 * @return array|string
 */
function get_source_value($array, $sourceParents) {
  foreach($sourceParents as $sourceParent) {
    $array = $array[$sourceParent];
  }
  return fix_date_time_for_hidden_fields($array);
}
