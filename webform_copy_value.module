<?php

function webform_copy_value_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == "webform_component_edit_form") {
    $type = $form['type']['#value'];
    $components = $form['#node']->webform['components'];
    if(in_array($type, array('textfield','select', 'hidden', 'textarea'))){
      $node = $form['#node'];
      $nid = $node->nid;
      if($type == 'hidden') {
        $type = "textfield";
      }
      $fieldList = get_webform_fields_by_type($components, $type);
      if(strpos($form['value']['#default_value'], 'webform_copy_value:') !== FALSE) {
        $sourceFormKey = get_source_form_key($form['value']);
        $rFieldList = array_flip($fieldList);
        $defaultValue = $rFieldList[$sourceFormKey];
      }

      unset($fieldList[$form['cid']['#value']]);
      $fieldList[0] = '--None--';

      $form['value']['#disabled'] =  TRUE;
      $form['copy_value_of'] = array (
        '#type' => 'select',
        '#title' => 'Copy value of field',
        '#options' => $fieldList,
        '#default_value' => isset($defaultValue) ? $defaultValue : 0,
        '#weight' => 0,
      );
      array_unshift($form['#submit'], 'webform_copy_value_submit');
    }
  }

  if(strpos($form_id, 'webform_client_form') !== FALSE) {  
    $components = $form['#node']->webform['components'];
    $sourceTargetMap = get_source_target_field_map($components);

    // handle fields with pagebreaks
    if(isset($form_state['values'])) {
      foreach ($form_state['values']['submitted'] as $submittedFieldkey => $submittedValue) {
        foreach ($sourceTargetMap as $st) {
          if($st['sourceCid'] == $submittedFieldkey) {
            if($components[$st['cid']]['page_num'] != $components[$submittedFieldkey] 
                  && empty($form_state['values']['submitted'][$st['cid']])) {
              $form['submitted'][$st['target']]['#default_value'] = $submittedValue;
            }
          }
        }
      }
    }

    // Prepare sourceTargetMap variable for javascript
    if(!empty($sourceTargetMap)) {
      $scm = array();
      foreach($sourceTargetMap as $k => $val) {
        $targetParents = webform_component_parent_keys($form['#node'], $components[$val['cid']]);
        $target = 'submitted';
        foreach($targetParents as $targetParent) {
          $target .= '[' . $targetParent . ']';
        }
        //$target = 'edit-submitted-' . str_replace('_', '-', implode('-', $targetParents));
        $sourceParents = webform_component_parent_keys($form['#node'], $components[$val['sourceCid']]);
        $sourceID = 'edit-submitted-' . str_replace('_', '-', implode('-', $sourceParents));
        $scm[$sourceID][$val['cid']] = $target;
      }

      // Attach necessary JavaScript.
      $form['#attached']['js'][] = drupal_get_path('module', 'webform_copy_value') . '/js/webform_copy_value.js';
      $form['#attached']['js'][] = array (
        // Pass PHP variables to Drupal.settings.
        'data' => array(
          'sourceTargetMap' => $scm,
        ),
        'type' => 'setting',
      );
    }
  }
}

/**
 * Addition submit function for component edit form
 * to handle submission with source field value
 * 
 * @param object $form
 * @param object $form_state
 */
function webform_copy_value_submit($form, &$form_state) {
  $sourceFieldId = $form_state['values']['copy_value_of'];
  if($sourceFieldId != 0) {
    $sourceFormKey = $form['#node']->webform['components'][$sourceFieldId]['form_key'];
    $form_state['values']['value'] = '[webform_copy_value:' . $sourceFormKey . ']';
  } else if($sourceFieldId == 0) {
    $form_state['values']['value'] = "";
  }
}

/**
 * source target map array for Javascript
 * 
 * @param array $components
 * @return array $sourceTargetMap
 */
function get_source_target_field_map($components) {
  $sourceTargetMap = array();
  $count = 0;
  foreach ($components as $component) {
    if(strpos($component['value'], 'webform_copy_value') !== FALSE) {
      $sourceTargetMap[$count]['cid'] = $component['cid'];
      $sourceTargetMap[$count]['target'] = $component['form_key'];

      $sourceFormKey = get_source_form_key($component['value']);

      $sourceTargetMap[$count]['source'] = $sourceFormKey;
      $sourceFieldCid = get_component_by_name($components, $sourceFormKey)['cid'];
      $sourceTargetMap[$count]['sourceCid'] = $sourceFieldCid;
    
      $count++;
    }
  }
  return $sourceTargetMap;
}

/**
 * get form key by default value
 * 
 * @param string $value
 * @return string
 */
function get_source_form_key ($value) {
  preg_match('/\[webform_copy_value\:(.*?)\]/', $value, $match);
  return $match[1];
}

/**
 * field list by type
 * 
 * @param array $components
 * @param string $type
 * @return array
 */
function get_webform_fields_by_type($components, $type) {
  $fields = array();
  foreach ($components as $component) {
    if($component['type'] == $type) {
      $cid  = $component['cid'];
      $fields[$cid] = $component['form_key'];
    }
  }
  return $fields;
}

/**
 * Handy function to fetch component info by it's name
 * 
 * @param array $components
 * @param string $formKey
 * @return array
 */
function get_component_by_name($components, $formKey) {
  foreach ($components as $component) {
    if($component['form_key'] == $formKey) {
      return $component;
    }
  }
  return false;
}

/**
 * Implements hook_webform_submission_presave().
 * 
 * Handle hidden fields
 */
function webform_copy_value_webform_submission_presave($node, &$submission) {
  $components = $node->webform['components'];
  foreach($components as $component) {
    if($component['type'] == 'hidden' && (strpos($component['value'], 'webform_copy_value:') !== FALSE)) {
      $sourceFormKey = get_source_form_key($component['value']);
      $sourceFieldId = get_component_by_name($components, $sourceFormKey)['cid'];
      $submission->data[$component['cid']][0] = $submission->data[$sourceFieldId][0];
    }
  }
}
